@page "/Planner"
@inject NavigationManager NavigationManager
@inject Radzen.DialogService DialogService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using Newtonsoft.Json;

<PageTitle>Planer</PageTitle>
<RadzenScheduler  @ref=@scheduler Data="@data" data-bind="@data" TItem="DataItem" StartProperty="Start" EndProperty="End" TextProperty="Text" Title="Title" Style="height:700px; width:auto;">
    <RadzenMonthView />
    <RadzenWeekView />
    <RadzenDayView />
</RadzenScheduler>
<br />
<br />

<div style="display: flex; justify-content: flex-end; position:fixed; bottom: 0; right: 0; margin-bottom: 30px; margin-right: 30px">
    <MudFab Color="Color.Info" StartIcon="@Icons.Material.Filled.Add" Style="align-content:center" OnClick="OpenPlaner" />
</div>
@code {
    List<string> keys = new();
    RadzenScheduler<DataItem> scheduler;
    async void OnSlotRender(SchedulerSlotRenderEventArgs args) 
    {
        data.Clear();
        var k = await localStorage.KeysAsync();
        foreach (var item in k)
        {
            if (item.Contains("Zadanie"))
            {
                keys.Add(item);
                continue;
            }
        }
        foreach (string item in keys)
        {
            string json = await localStorage.GetItemAsync<string>(item);
            Zadanie zadanie = JsonConvert.DeserializeObject<Zadanie>(json);

            DataItem i = new(zadanie.data_zadania, zadanie.data_zadania + TimeSpan.FromHours(2), zadanie.zadanie + " " + zadanie.cel, zadanie.cel);
            data.Add(i);
        }
        //this.StateHasChanged();
    }

    async Task Load()
    {
        data.Clear();
        var k = await localStorage.KeysAsync();
        foreach (var item in k)
        {
            if (item.Contains("Zadanie"))
            {
                keys.Add(item);
                continue;
            }
        }
        foreach (string item in keys)
        {
            string json = await localStorage.GetItemAsync<string>(item);
            Zadanie zadanie = JsonConvert.DeserializeObject<Zadanie>(json);

            DataItem i = new(zadanie.data_zadania, zadanie.data_zadania + TimeSpan.FromHours(2), zadanie.zadanie + " " + zadanie.cel, zadanie.cel);
            data.Add(i);
        }
        scheduler.Reload();
        this.StateHasChanged();
    }
    protected override async Task OnInitializedAsync()
    {
        await Load();
        this.StateHasChanged();

    }
    private void OpenPlaner()
    {
        NavigationManager.NavigateTo("/Tasks");

    }
    class DataItem
    {
        public DateTime? Start { get; set; }
        public DateTime? End { get; set; }
        public string Text { get; set; }
        public string Title { get; set; }
        public DataItem(DateTime? Start, DateTime? End, string Text, string Title)
        {
            this.Start = Start;
            this.End = End;
            this.Text = Text;
            this.Title = Title;
        }
    }

    List<DataItem> data = new();
}